{"version":3,"sources":["index.js","App.js"],"names":["ReactDOM","render","controller","AbortController","awsLambda","dateOptions","year","month","day","hour","minute","second","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","useState","exchangeRates","selectedExchangeRate","erState","setERState","tickers","tickerId","tickerName","tickerSymbol","tickerPrice","tState","setTState","portfoliocolumns","title","field","symbol","positionData","precision","portfolioId","portfolioUnrealisedPL","portfolioRealisedPL","pState","setPState","loadTickers","e","a","tickerlist","fetch","getTickers","json","tickerData","status","Error","message","JSON","parse","body","Items","ticker","thisObj","parseInt","N","S","push","toString","priceresponse","pricebody","Item","cmcCacheData","M","quote","price","refreshPortfolio","unrealisedPL","response","portfolioData","newData","positions","L","position","positionPL","currencyId","active","BOOL","priceAtTrade","positionQty","id","_id","tradetime","Date","DateTime","toLocaleTimeString","name","tradePrice","rate","pl","toFixed","realisedPL","initPage","useEffect","abort","searchObject","obj","match","results","i","length","getPrice","target","value","enterTrade","window","confirm","postData","document","getElementById","method","headers","stringify","post","updateCacheFile","resetPortfolio","setTimeout","getOptions","map","getExchangeRates","exchangeRate","rateName","className","icons","columns","data","editable","onRowDelete","oldData","Promise","resolve","then","currentPriceRes","alert","onChange","type","Button","variant","color","onClick","find","exchangeRateData"],"mappings":"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","file":"static/js/main.51ab3715.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { forwardRef, useState, useEffect }  from 'react'\n\nimport MaterialTable from 'material-table'\nimport AddBox from '@material-ui/icons/AddBox'\nimport ArrowUpward from '@material-ui/icons/ArrowUpward'\nimport Check from '@material-ui/icons/Check'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport Clear from '@material-ui/icons/Clear'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline'\nimport Edit from '@material-ui/icons/Edit'\nimport FilterList from '@material-ui/icons/FilterList'\nimport FirstPage from '@material-ui/icons/FirstPage'\nimport LastPage from '@material-ui/icons/LastPage'\nimport Remove from '@material-ui/icons/Remove'\nimport SaveAlt from '@material-ui/icons/SaveAlt'\nimport Search from '@material-ui/icons/Search'\nimport ViewColumn from '@material-ui/icons/ViewColumn'\nimport Button from '@material-ui/core/Button'\n\nimport './App.css'\n\n/**\n* This is main export for the app.  Using a functional component and useEffect to access hooks.\n*/\n\nexport default function App() {\n\n  const controller = new AbortController()\n\n  // leave dbServer blank to default to send API calls to same endpoint as site\n  //const dbServer = \"\"\n  // Set dbServer to location of deployed AWS and Lambda solution - Javascript\n  //const awsLambda = \"https://pr2zg9d0r2.execute-api.eu-west-1.amazonaws.com/prod\"\n  // Set dbServer to location of deployed AWS and Lambda solution - Python\n  const awsLambda = \"https://ratossrau3.execute-api.eu-west-1.amazonaws.com/prod\"\n\n\n  const dateOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' }\n\n  const tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n  }\n\n  const currency = 'USD'\n\n  const [erState, setERState] = useState({\n    exchangeRates: [ {'rateName': 'USD', 'rate': 1, 'symbol': '$'} , {'rateName' :'GBP', 'rate': 0.89, 'symbol': '£' } ],\n    selectedExchangeRate: [ {'rateName': 'USD', 'rate': 1, 'symbol': '$'} ]\n  })\n\n  const [tState, setTState] = useState({\n    tickers: [ { } ],\n    tickerId: '',\n    tickerName: '',\n    tickerSymbol: '',\n    tickerPrice: '',\n  })\n\n  const [pState, setPState] = useState({\n    portfoliocolumns: [ { title: 'Trade time', field: 'tradetime' },{ title: 'Name', field: 'name' },{ title: 'Symbol', field: 'symbol' },{ title: 'Position', field: 'position' },{ title: 'Price at trade ('+erState.selectedExchangeRate[0].symbol+')', field: 'tradePrice' },{ title: 'Active', field: 'active' },{ title: 'Unrealised P&L  ('+erState.selectedExchangeRate[0].symbol+')', field: 'pl' } ],\n    positionData: [ { } ],\n    precision: 2,\n    portfolioId: 0,\n    portfolioUnrealisedPL: 0,\n    portfolioRealisedPL: 0,\n  })\n\n  /**\n  * Async function to retrieve ticker list and populate to state, and get the price for the first currency to display to the user.\n  */\n  const loadTickers = async e => {\n    let tickers = [...tState.tickers]\n    let tickerlist = []\n    const getTickers = await fetch(awsLambda+'/getTickers')\n    const tickerData = await getTickers.json()\n    if (getTickers.status !== 200) {\n      throw Error(tickerData.message)\n    }\n    for (let ticker of JSON.parse(tickerData.body).Items) {\n      let thisObj = { }\n      thisObj[\"tickerId\"]=parseInt(ticker.tickerId.N)\n      thisObj[\"tickerName\"]=ticker.tickerName.S\n      thisObj[\"tickerSymbol\"]=ticker.tickerSymbol.S\n      tickerlist.push(thisObj)\n    }\n    tickers=tickerlist\n    let tickerId = [...tState.tickerId.toString()]\n    tickerId=tickerlist[0].tickerId\n    let tickerSymbol = [...tState.tickerSymbol]\n    tickerSymbol=tickerlist[0].tickerSymbol\n    let tickerName = [...tState.tickerName]\n    tickerName=tickerlist[0].tickerName\n    let tickerPrice = [...tState.tickerPrice.toString()]\n    const priceresponse = await fetch(awsLambda+'/getPrice/'+parseInt(tickerId))\n    const pricebody = await priceresponse.json()\n    if (priceresponse.status !== 200) {\n      throw Error(pricebody.message)\n    } else {\n      tickerPrice = pricebody.Item.cmcCacheData.M.quote.M[currency].M.price.N\n      setTState({ ...tState, tickers, tickerPrice, tickerId, tickerSymbol, tickerName })\n    }\n  }\n\n  /**\n  * Async function to retrieve portfolio list and populate to state, and calculate P&L on the fly for live positions.\n  */\n  const refreshPortfolio = async e => {\n    let positionData = [...pState.positionData]\n    // convert stored integers to strings to remain iterable\n    let portfolioUnrealisedPL = [...pState.portfolioUnrealisedPL.toString()]\n    let portfolioRealisedPL = [...pState.portfolioRealisedPL.toString()]\n    positionData = []\n    let unrealisedPL = 0\n    const response = await fetch(awsLambda+'/getPortfolio/'+pState.portfolioId)\n    const portfolioData = await response.json()\n    if (response.status !== 200) {\n      throw Error(portfolioData.message)\n    } else {\n      let newData = []\n      if (typeof(portfolioData.Item.positions.L)!=='undefined') {\n      for ( let position of portfolioData.Item.positions.L) {\n        let tickerPrice,positionPL = 0\n        const priceresponse = await fetch(awsLambda+'/getPrice/'+position.M.currencyId.S)\n        const pricebody = await priceresponse.json()\n        if (priceresponse.status !== 200) {\n          throw Error(pricebody.message)\n        } else {\n          tickerPrice = pricebody.Item.cmcCacheData.M.quote.M[currency].M.price.N\n          // Only aggregate P&L for active positions\n          if(position.M.active.BOOL) {\n            // Calculate P&L - current price - price at trade * position qty\n            unrealisedPL = unrealisedPL+(tickerPrice-position.M.priceAtTrade.S)*position.M.positionQty.S\n            positionPL = (tickerPrice-position.M.priceAtTrade.S)*position.M.positionQty.S\n          }\n          // Push each position up to the newData array\n          newData.push({\n            id: position.M._id.S,\n            portfolioId: pState.portfolioId,\n            tradetime: new Date(parseInt(position.M.DateTime.N)).toLocaleTimeString(\"en-GB\" , dateOptions ),\n            currencyId: position.M.currencyId.S,\n            name: position.M.name.S,\n            symbol: position.M.symbol.S,\n            position: position.M.positionQty.S,\n            tradePrice: (position.M.priceAtTrade.S)*erState.selectedExchangeRate[0].rate,\n            active: position.M.active.BOOL.toString(),\n            pl:(positionPL*erState.selectedExchangeRate[0].rate).toFixed(pState.precision)\n          })\n        }\n      }\n      }\n      // Set newData into positionData state for setting\n      positionData = newData\n      //console.log(portfolioData.Item.realisedPL)\n      portfolioUnrealisedPL = unrealisedPL\n      portfolioRealisedPL = portfolioData.Item.realisedPL.N\n      setPState({ ...pState, positionData, portfolioUnrealisedPL, portfolioRealisedPL})\n    }\n  }\n\n  const initPage = async () => {\n    loadTickers()\n    refreshPortfolio()\n  }\n\n  useEffect(() => {\n    initPage()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return () => { controller.abort() } }, []\n  )\n\n  const searchObject = function(obj, match, field) {\n    let results = []\n    for(let i = 0; i<obj.length; i++) {\n      if(obj[i][field]===parseInt(match)) {\n        results.push(obj[i])\n      }\n    }\n    return results\n  }\n\n  /**\n  * Async function to retrieve price data for a ticker defined by the CMC ID.\n  */\n  const getPrice = async e => {\n    let tickerId = [...tState.tickerId.toString()]\n    tickerId = e.target.value\n    let tickerData = searchObject(tState.tickers,tickerId,\"tickerId\")\n    let tickerSymbol = [...tState.tickerSymbol]\n    tickerSymbol = tickerData[0].tickerSymbol\n    let tickerName = [...tState.tickerName]\n    tickerName = tickerData[0].tickerName\n    let tickerPrice = [...tState.tickerPrice.toString()]\n\n    const priceresponse = await fetch(awsLambda+'/getPrice/'+parseInt(tickerId))\n    const pricebody = await priceresponse.json()\n    if (priceresponse.status !== 200) {\n      throw Error(pricebody.message)\n    } else {\n      tickerPrice = pricebody.Item.cmcCacheData.M.quote.M[currency].M.price.N.toString()\n      setTState({ ...tState, tickerId, tickerPrice,tickerName, tickerSymbol })\n    }\n  }\n\n  /**\n  * Async function to enter trade data using the selected currency and input position data.\n  */\n  const enterTrade = async e => {\n    if (window.confirm (\"Are you sure?\")) {\n      let postData = []\n      postData.push({\"portfolioId\": pState.portfolioId})\n      postData.push({\"tradeDate\": new Date()})\n      postData.push({\"positionQty\":document.getElementById(\"positionQty\").value})\n      postData.push({\"tickerId\":tState.tickerId})\n      postData.push({\"tickerName\":tState.tickerName})\n      postData.push({\"tickerSymbol\":tState.tickerSymbol})\n      postData.push({\"tickerPrice\":tState.tickerPrice})\n\n      const response = await fetch(awsLambda+'/postNewPosition', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Methods': '*',\n          'Access-Control-Allow-Credentials': 'true',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        },\n        body: JSON.stringify({ post: postData }),\n      })\n      const body = await response\n      if (response.status !== 200) {\n        throw Error(body.message)\n      } else {\n        refreshPortfolio()\n      }\n    }\n  }\n\n  /**\n  * Async function to reset the cache file in the database based on the button value.\n  */\n  const updateCacheFile = async e => {\n    const response = await fetch(awsLambda+'/updateCache')\n    const body = await response\n    if (response.status !== 200) {\n      throw Error(body.message)\n    } else {\n      loadTickers()\n      let tickers = []\n      setTState({...tState, tickers})\n      refreshPortfolio()\n    }\n  }\n\n  /**\n  * Async function to reset the portfolio view in the database completely.\n  */\n  const resetPortfolio = async e => {\n    if (window.confirm (\"Are you sure?\")) {\n      let postData = []\n      postData.push({\"portfolioId\": pState.portfolioId})\n      const response = await fetch(awsLambda+'/resetPortfolio', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ post: postData }),\n      })\n      const body = await response\n      if (response.status !== 200) {\n        throw Error(body.message)\n      } else {\n        setTimeout(() => {\n          refreshPortfolio()\n        }, 250)\n      }\n    }\n  }\n\n  const getOptions = tState.tickers.map(\n    (ticker) => <option value={ticker.tickerId}>{ticker.tickerName}</option>\n  )\n\n  const getExchangeRates = erState.exchangeRates.map(\n    (exchangeRate) => <option value={exchangeRate.rateName}>{exchangeRate.rateName}</option>\n  )\n\n  const updateExchangeRate = (e) =>  {\n    let selectedExchangeRate = [...erState.selectedExchangeRate]\n    let exchangeRate = erState.exchangeRates.find(exchangeRateData => exchangeRateData.rateName === e.target.value)\n    selectedExchangeRate = []\n    selectedExchangeRate.push(exchangeRate)\n    setERState({ ...erState, selectedExchangeRate })\n  }\n\n  return (\n    <div>\n    {/* Headlines */}\n    <div className=\"outerDiv\">\n    <div className=\"leftDiv\"><h2>CryptoDash</h2></div>\n    <div className=\"midDiv\"><h4>Unrealised P&L Total: {erState.selectedExchangeRate[0].symbol+''+(pState.portfolioUnrealisedPL*erState.selectedExchangeRate[0].rate).toFixed(pState.precision)}</h4></div>\n    <div className=\"rightDiv\"><h4>Realised P&L Total: {erState.selectedExchangeRate[0].symbol+''+(pState.portfolioRealisedPL*erState.selectedExchangeRate[0].rate).toFixed(pState.precision)}</h4></div>\n    </div>\n\n    {/* Portfolio view table */}\n    <MaterialTable\n    title='Portfolio View'\n    icons={tableIcons}\n    columns={pState.portfoliocolumns}\n    data={pState.positionData}\n    editable={{\n      onRowDelete: oldData =>\n      new Promise(resolve => {\n        if(oldData.active === 'true') {\n          setTimeout(() => {\n            fetch(awsLambda+'/getPrice/'+oldData.currencyId, { } )\n            .then(function(response) {\n              return response.json()\n            })\n            .then(function(currentPriceRes) {\n              let postData = []\n              postData.push({\"portfolioId\": oldData.portfolioId})\n              postData.push({\"table\": \"portfolios\"})\n              postData.push({\"positionId\": oldData.id})\n              postData.push({\"realisedPL\": (currentPriceRes.Item.cmcCacheData.M.quote.M[currency].M.price.N-oldData.tradePrice)*oldData.position})\n              fetch(awsLambda+'/exitPosition', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Access-Control-Allow-Methods': '*',\n                  'Access-Control-Allow-Credentials': 'true',\n                  'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n                },\n                body: JSON.stringify({ post: postData }),\n              }).then(function(response) {\n                refreshPortfolio()\n                resolve()\n              })\n            })\n          }, 250)\n        } else {\n          alert(\"You cannot exit a closed position.\")\n          resolve()\n        }\n      }),\n    }}\n    />\n\n    {/* Trade entry and system control */}\n    <table>\n    <tbody>\n    <tr><td><h3>Trade Entry</h3></td></tr>\n    <tr><td>Select currency</td><td><select onChange={getPrice}>{getOptions}</select></td></tr>\n    <tr><td>Price of currency</td><td id='tickerPrice'>{erState.selectedExchangeRate[0].symbol+''+(tState.tickerPrice*erState.selectedExchangeRate[0].rate) }</td></tr>\n    <tr><td>Position quantity</td><td><input id='positionQty' type='text' /></td></tr>\n    <tr><td></td><td><Button variant=\"contained\" color=\"primary\" onClick={enterTrade}>Trade</Button></td></tr>\n    <tr><td><h3>System Control</h3></td></tr>\n    <tr><td>Reload cache</td><td><Button variant=\"contained\" color=\"primary\" onClick={updateCacheFile}>Fluctuate prices +/-5%</Button></td></tr>\n    <tr><td>Reset portfolio</td><td><Button variant=\"contained\" color=\"primary\" onClick={resetPortfolio}>Zero positions</Button></td></tr>\n    <tr><td>Currency to view (USD={erState.selectedExchangeRate[0].rate})</td><td><select onChange={updateExchangeRate}>{getExchangeRates}</select></td></tr>\n    </tbody>\n    </table>\n\n    </div>\n  )\n}\n"],"sourceRoot":""}