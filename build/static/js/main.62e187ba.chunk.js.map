{"version":3,"sources":["index.js","App.js"],"names":["ReactDOM","render","controller","AbortController","awsLambda","dateOptions","year","month","day","hour","minute","second","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","useState","exchangeRates","selectedExchangeRate","erState","setERState","tickers","tickerId","tickerName","tickerSymbol","tickerPrice","tState","setTState","portfoliocolumns","title","field","symbol","positionData","precision","portfolioId","portfolioUnrealisedPL","portfolioRealisedPL","pState","setPState","loadTickers","e","a","tickerlist","fetch","getTickers","json","tickerData","status","Error","message","body","ticker","push","JSON","parse","toString","parseInt","priceresponse","pricebody","Items","cmcCacheData","quote","price","refreshPortfolio","unrealisedPL","response","portfolioData","newData","positions","position","positionPL","currencyId","active","priceAtTrade","positionQty","id","_id","tradetime","Date","DateTime","toLocaleTimeString","name","tradePrice","rate","pl","toFixed","realisedPL","initPage","useEffect","abort","searchObject","obj","match","results","i","length","getPrice","target","value","enterTrade","window","confirm","postData","document","getElementById","method","headers","stringify","post","updateCacheFile","textContent","resetPortfolio","setTimeout","getOptions","map","getExchangeRates","exchangeRate","rateName","className","icons","columns","data","editable","onRowDelete","oldData","Promise","resolve","then","currentPriceRes","USD","alert","onChange","type","Button","variant","color","onClick","find","exchangeRateData"],"mappings":"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","file":"static/js/main.62e187ba.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { forwardRef, useState, useEffect }  from 'react'\n\nimport MaterialTable from 'material-table'\nimport AddBox from '@material-ui/icons/AddBox'\nimport ArrowUpward from '@material-ui/icons/ArrowUpward'\nimport Check from '@material-ui/icons/Check'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport Clear from '@material-ui/icons/Clear'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline'\nimport Edit from '@material-ui/icons/Edit'\nimport FilterList from '@material-ui/icons/FilterList'\nimport FirstPage from '@material-ui/icons/FirstPage'\nimport LastPage from '@material-ui/icons/LastPage'\nimport Remove from '@material-ui/icons/Remove'\nimport SaveAlt from '@material-ui/icons/SaveAlt'\nimport Search from '@material-ui/icons/Search'\nimport ViewColumn from '@material-ui/icons/ViewColumn'\nimport Button from '@material-ui/core/Button'\n\nimport './App.css'\n\n/**\n* This is main export for the app.  Using a functional component and useEffect to access hooks.\n*/\n\nexport default function App() {\n\n  const controller = new AbortController()\n\n  // leave dbServer blank to default to send API calls to same endpoint as site\n  //const dbServer = \"\"\n  // Set dbServer to location of deployed AWS and Lambda solution\n  const awsLambda = \"https://pr2zg9d0r2.execute-api.eu-west-1.amazonaws.com/prod\"\n\n  const dateOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' }\n\n  const tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n  }\n\n  const currency = 'USD'\n\n  const [erState, setERState] = useState({\n    exchangeRates: [ {'rateName': 'USD', 'rate': 1, 'symbol': '$'} , {'rateName' :'GBP', 'rate': 0.89, 'symbol': '£' } ],\n    selectedExchangeRate: [ {'rateName': 'USD', 'rate': 1, 'symbol': '$'} ]\n  })\n\n  const [tState, setTState] = useState({\n    tickers: [ { } ],\n    tickerId: '',\n    tickerName: '',\n    tickerSymbol: '',\n    tickerPrice: '',\n  })\n\n  const [pState, setPState] = useState({\n    portfoliocolumns: [ { title: 'Trade time', field: 'tradetime' },{ title: 'Name', field: 'name' },{ title: 'Symbol', field: 'symbol' },{ title: 'Position', field: 'position' },{ title: 'Price at trade ('+erState.selectedExchangeRate[0].symbol+')', field: 'tradePrice' },{ title: 'Active', field: 'active' },{ title: 'Unrealised P&L  ('+erState.selectedExchangeRate[0].symbol+')', field: 'pl' } ],\n    positionData: [ { } ],\n    precision: 2,\n    portfolioId: 0,\n    portfolioUnrealisedPL: 0,\n    portfolioRealisedPL: 0,\n  })\n\n  /**\n  * Async function to retrieve ticker list and populate to state, and get the price for the first currency to display to the user.\n  */\n  const loadTickers = async e => {\n    let tickers = [...tState.tickers]\n    let tickerlist = []\n    const getTickers = await fetch(awsLambda+'/getTickers')\n    const tickerData = await getTickers.json()\n    if (getTickers.status !== 200) {\n      throw Error(tickerData.message)\n    }\n    for (let ticker of tickerData.body) {\n      tickerlist.push(ticker)\n    }\n    tickerlist = JSON.parse(tickerData.body)\n    tickers=tickerlist\n    let tickerId = [...tState.tickerId]\n    tickerId=tickerlist[0].tickerId.toString()\n    let tickerSymbol = [...tState.tickerSymbol]\n    tickerSymbol=tickerlist[0].tickerSymbol\n    let tickerName = [...tState.tickerName]\n    tickerName=tickerlist[0].tickerName\n    let tickerPrice = [...tState.tickerPrice.toString()]\n    const priceresponse = await fetch(awsLambda+'/getPrice/'+parseInt(tickerId))\n    const pricebody = await priceresponse.json()\n    if (priceresponse.status !== 200) {\n      throw Error(pricebody.message)\n    } else {\n      tickerPrice = pricebody.body.Items[0].cmcCacheData.quote[currency].price.toString()\n      setTState({ ...tState, tickers, tickerPrice, tickerId, tickerSymbol, tickerName })\n    }\n  }\n\n  /**\n  * Async function to retrieve portfolio list and populate to state, and calculate P&L on the fly for live positions.\n  */\n  const refreshPortfolio = async e => {\n    let positionData = [...pState.positionData]\n    // convert stored integers to strings to remain iterable\n    let portfolioUnrealisedPL = [...pState.portfolioUnrealisedPL.toString()]\n    let portfolioRealisedPL = [...pState.portfolioRealisedPL.toString()]\n    positionData = []\n    let unrealisedPL = 0\n    const response = await fetch(awsLambda+'/getPortfolio/'+pState.portfolioId)\n    const portfolioData = await response.json()\n    if (response.status !== 200) {\n      throw Error(portfolioData.message)\n    } else {\n      let newData = []\n      for ( let position of portfolioData.body.Items[0].positions) {\n        let tickerPrice,positionPL = 0\n        const priceresponse = await fetch(awsLambda+'/getPrice/'+position.currencyId)\n        const pricebody = await priceresponse.json()\n        if (priceresponse.status !== 200) {\n          throw Error(pricebody.message)\n        } else {\n          tickerPrice=pricebody.body.Items[0].cmcCacheData.quote[currency].price.toString()\n          // Only aggregate P&L for active positions\n          if(position.active) {\n            // Calculate P&L - current price - price at trade * position qty\n            unrealisedPL = unrealisedPL+(tickerPrice-position.priceAtTrade)*position.positionQty\n            positionPL = (tickerPrice-position.priceAtTrade)*position.positionQty\n          }\n          // Push each position up to the newData array\n          newData.push({\n            id: position._id,\n            portfolioId: pState.portfolioId,\n            tradetime: new Date(position.DateTime).toLocaleTimeString(\"en-GB\" , dateOptions ),\n            currencyId: position.currencyId,\n            name: position.name,\n            symbol: position.symbol,\n            position: position.positionQty,\n            tradePrice: (position.priceAtTrade*erState.selectedExchangeRate[0].rate),\n            active: position.active.toString(),\n            pl:(positionPL*erState.selectedExchangeRate[0].rate).toFixed(pState.precision)\n          })\n        }\n      }\n      // Set newData into positionData state for setting\n      positionData = newData\n      portfolioUnrealisedPL = unrealisedPL\n      portfolioRealisedPL = portfolioData.body.Items[0].realisedPL\n      setPState({ ...pState, positionData, portfolioUnrealisedPL, portfolioRealisedPL})\n    }\n  }\n\n  const initPage = async () => {\n    loadTickers()\n    refreshPortfolio()\n  }\n\n  useEffect(() => {\n    initPage()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return () => { controller.abort() } }, []\n  )\n\n  const searchObject = function(obj, match, field) {\n    let results = []\n    for(let i = 0; i<obj.length; i++) {\n      if(obj[i][field]===parseInt(match)) {\n        results.push(obj[i])\n      }\n    }\n    return results\n  }\n\n  /**\n  * Async function to retrieve price data for a ticker defined by the CMC ID.\n  */\n  const getPrice = async e => {\n    let tickerId = [...tState.tickerId]\n    tickerId = e.target.value\n    let tickerData = searchObject(tState.tickers,tickerId,\"tickerId\")\n    let tickerSymbol = [...tState.tickerSymbol]\n    tickerSymbol = tickerData[0].tickerSymbol\n    let tickerName = [...tState.tickerName]\n    tickerName = tickerData[0].tickerName\n    let tickerPrice = [...tState.tickerPrice.toString()]\n\n    const priceresponse = await fetch(awsLambda+'/getPrice/'+parseInt(tickerId))\n    const pricebody = await priceresponse.json()\n    if (priceresponse.status !== 200) {\n      throw Error(pricebody.message)\n    } else {\n      tickerPrice = pricebody.body.Items[0].cmcCacheData.quote[currency].price.toString()\n      setTState({ ...tState, tickerId, tickerPrice,tickerName, tickerSymbol })\n    }\n  }\n\n  /**\n  * Async function to enter trade data using the selected currency and input position data.\n  */\n  const enterTrade = async e => {\n    if (window.confirm (\"Are you sure?\")) {\n      let postData = []\n      postData.push({\"portfolioId\": pState.portfolioId})\n      postData.push({\"tradeDate\": new Date()})\n      postData.push({\"positionQty\":document.getElementById(\"positionQty\").value})\n      postData.push({\"tickerId\":tState.tickerId})\n      postData.push({\"tickerName\":tState.tickerName})\n      postData.push({\"tickerSymbol\":tState.tickerSymbol})\n      postData.push({\"tickerPrice\":tState.tickerPrice})\n\n      const response = await fetch(awsLambda+'/postNewPosition', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Methods': '*',\n          'Access-Control-Allow-Credentials': 'true',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n        },\n        body: JSON.stringify({ post: postData }),\n      })\n      const body = await response\n      if (response.status !== 200) {\n        throw Error(body.message)\n      } else {\n        refreshPortfolio()\n      }\n    }\n  }\n\n  /**\n  * Async function to reset the cache file in the database based on the button value.\n  */\n  const updateCacheFile = async e => {\n    const response = await fetch(awsLambda+'/updateCache?file='+e.target.textContent)\n    const body = await response\n    if (response.status !== 200) {\n      throw Error(body.message)\n    } else {\n      loadTickers()\n      let tickers = []\n      setTState({...tState, tickers})\n      refreshPortfolio()\n    }\n  }\n\n  /**\n  * Async function to reset the portfolio view in the database completely.\n  */\n  const resetPortfolio = async e => {\n    if (window.confirm (\"Are you sure?\")) {\n      let postData = []\n      postData.push({\"portfolioId\": pState.portfolioId})\n      const response = await fetch(awsLambda+'/resetPortfolio', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ post: postData }),\n      })\n      const body = await response\n      if (response.status !== 200) {\n        throw Error(body.message)\n      } else {\n        setTimeout(() => {\n          refreshPortfolio()\n        }, 250)\n      }\n    }\n  }\n\n  const getOptions = tState.tickers.map(\n    (ticker) => <option value={ticker.tickerId}>{ticker.tickerName}</option>\n  )\n\n  const getExchangeRates = erState.exchangeRates.map(\n    (exchangeRate) => <option value={exchangeRate.rateName}>{exchangeRate.rateName}</option>\n  )\n\n  const updateExchangeRate = (e) =>  {\n    let selectedExchangeRate = [...erState.selectedExchangeRate]\n    let exchangeRate = erState.exchangeRates.find(exchangeRateData => exchangeRateData.rateName === e.target.value)\n    selectedExchangeRate = []\n    selectedExchangeRate.push(exchangeRate)\n    setERState({ ...erState, selectedExchangeRate })\n  }\n\n  return (\n    <div>\n    {/* Headlines */}\n    <div className=\"outerDiv\">\n    <div className=\"leftDiv\"><h2>CryptoDash</h2></div>\n    <div className=\"midDiv\"><h4>Unrealised P&L Total: {erState.selectedExchangeRate[0].symbol+''+(pState.portfolioUnrealisedPL*erState.selectedExchangeRate[0].rate).toFixed(pState.precision)}</h4></div>\n    <div className=\"rightDiv\"><h4>Realised P&L Total: {erState.selectedExchangeRate[0].symbol+''+(pState.portfolioRealisedPL*erState.selectedExchangeRate[0].rate).toFixed(pState.precision)}</h4></div>\n    </div>\n\n    {/* Portfolio view table */}\n    <MaterialTable\n    title='Portfolio View'\n    icons={tableIcons}\n    columns={pState.portfoliocolumns}\n    data={pState.positionData}\n    editable={{\n      onRowDelete: oldData =>\n      new Promise(resolve => {\n        if(oldData.active === 'true') {\n          setTimeout(() => {\n            fetch(awsLambda+'/getPrice/'+oldData.currencyId, { } )\n            .then(function(response) {\n              return response.json()\n            })\n            .then(function(currentPriceRes) {\n              let postData = []\n              postData.push({\"portfolioId\": oldData.portfolioId})\n              postData.push({\"table\": \"portfolios\"})\n              postData.push({\"positionId\": oldData.id})\n              postData.push({\"realisedPL\": (currentPriceRes.body.Items[0].cmcCacheData.quote.USD.price-oldData.tradePrice)*oldData.position})\n              fetch(awsLambda+'/exitPosition', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Access-Control-Allow-Methods': '*',\n                  'Access-Control-Allow-Credentials': 'true',\n                  'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n                },\n                body: JSON.stringify({ post: postData }),\n              }).then(function(response) {\n                refreshPortfolio()\n                resolve()\n              })\n            })\n          }, 250)\n        } else {\n          alert(\"You cannot exit a closed position.\")\n          resolve()\n        }\n      }),\n    }}\n    />\n\n    {/* Trade entry and system control */}\n    <table>\n    <tbody>\n    <tr><td><h3>Trade Entry</h3></td></tr>\n    <tr><td>Select currency</td><td><select onChange={getPrice}>{getOptions}</select></td></tr>\n    <tr><td>Price of currency</td><td id='tickerPrice'>{erState.selectedExchangeRate[0].symbol+''+(tState.tickerPrice*erState.selectedExchangeRate[0].rate) }</td></tr>\n    <tr><td>Position quantity</td><td><input id='positionQty' type='text' /></td></tr>\n    <tr><td></td><td><Button variant=\"contained\" color=\"primary\" onClick={enterTrade}>Trade</Button></td></tr>\n    <tr><td><h3>System Control</h3></td></tr>\n    <tr><td>Reload cache from sandbox</td><td><Button variant=\"contained\" color=\"primary\" onClick={updateCacheFile}>coinmarketcap.json</Button></td></tr>\n    <tr><td>Reload cache from pro</td><td><Button variant=\"contained\" color=\"primary\" onClick={updateCacheFile}>pro.coinmarketcap.json</Button></td></tr>\n    <tr><td>Reset portfolio</td><td><Button variant=\"contained\" color=\"primary\" onClick={resetPortfolio}>Zero positions</Button></td></tr>\n    <tr><td>Currency to view (USD={erState.selectedExchangeRate[0].rate})</td><td><select onChange={updateExchangeRate}>{getExchangeRates}</select></td></tr>\n    </tbody>\n    </table>\n\n    </div>\n  )\n}\n"],"sourceRoot":""}